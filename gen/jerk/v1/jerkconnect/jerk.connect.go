// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: jerk/v1/jerk.proto

package jerkconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pshvedko/mapslice/gen/jerk/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JerkServiceName is the fully-qualified name of the JerkService service.
	JerkServiceName = "jerk.v1.JerkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JerkServicePingProcedure is the fully-qualified name of the JerkService's Ping RPC.
	JerkServicePingProcedure = "/jerk.v1.JerkService/Ping"
	// JerkServiceTraceProcedure is the fully-qualified name of the JerkService's Trace RPC.
	JerkServiceTraceProcedure = "/jerk.v1.JerkService/Trace"
)

// JerkServiceClient is a client for the jerk.v1.JerkService service.
type JerkServiceClient interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	Trace(context.Context, *connect.Request[v1.TraceRequest]) (*connect.ServerStreamForClient[v1.TraceResponse], error)
}

// NewJerkServiceClient constructs a client for the jerk.v1.JerkService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJerkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JerkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	jerkServiceMethods := v1.File_jerk_v1_jerk_proto.Services().ByName("JerkService").Methods()
	return &jerkServiceClient{
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+JerkServicePingProcedure,
			connect.WithSchema(jerkServiceMethods.ByName("Ping")),
			connect.WithClientOptions(opts...),
		),
		trace: connect.NewClient[v1.TraceRequest, v1.TraceResponse](
			httpClient,
			baseURL+JerkServiceTraceProcedure,
			connect.WithSchema(jerkServiceMethods.ByName("Trace")),
			connect.WithClientOptions(opts...),
		),
	}
}

// jerkServiceClient implements JerkServiceClient.
type jerkServiceClient struct {
	ping  *connect.Client[v1.PingRequest, v1.PingResponse]
	trace *connect.Client[v1.TraceRequest, v1.TraceResponse]
}

// Ping calls jerk.v1.JerkService.Ping.
func (c *jerkServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Trace calls jerk.v1.JerkService.Trace.
func (c *jerkServiceClient) Trace(ctx context.Context, req *connect.Request[v1.TraceRequest]) (*connect.ServerStreamForClient[v1.TraceResponse], error) {
	return c.trace.CallServerStream(ctx, req)
}

// JerkServiceHandler is an implementation of the jerk.v1.JerkService service.
type JerkServiceHandler interface {
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	Trace(context.Context, *connect.Request[v1.TraceRequest], *connect.ServerStream[v1.TraceResponse]) error
}

// NewJerkServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJerkServiceHandler(svc JerkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jerkServiceMethods := v1.File_jerk_v1_jerk_proto.Services().ByName("JerkService").Methods()
	jerkServicePingHandler := connect.NewUnaryHandler(
		JerkServicePingProcedure,
		svc.Ping,
		connect.WithSchema(jerkServiceMethods.ByName("Ping")),
		connect.WithHandlerOptions(opts...),
	)
	jerkServiceTraceHandler := connect.NewServerStreamHandler(
		JerkServiceTraceProcedure,
		svc.Trace,
		connect.WithSchema(jerkServiceMethods.ByName("Trace")),
		connect.WithHandlerOptions(opts...),
	)
	return "/jerk.v1.JerkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JerkServicePingProcedure:
			jerkServicePingHandler.ServeHTTP(w, r)
		case JerkServiceTraceProcedure:
			jerkServiceTraceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJerkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJerkServiceHandler struct{}

func (UnimplementedJerkServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("jerk.v1.JerkService.Ping is not implemented"))
}

func (UnimplementedJerkServiceHandler) Trace(context.Context, *connect.Request[v1.TraceRequest], *connect.ServerStream[v1.TraceResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("jerk.v1.JerkService.Trace is not implemented"))
}
